name: pytest

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Debian 10"
            python-version: "3.7"
            postgres-version: 11
            postgis-version: 2.5
          - name: "Debian 11"
            python-version: "3.9"
            postgres-version: 13
            postgis-version: 3.2

    name: ${{ matrix.name }}

    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres-version }}-${{ matrix.postgis-version }}
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatpasswd
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
        - name: Clone gn_modules repository
          uses: actions/checkout@v3
          with:
            submodules: recursive
        - name: Add postgis_raster database extension
          if: ${{ matrix.postgis-version >= 3 }}
          run: |
            psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "postgis_raster";'
          env:
            PGPASSWORD: geonatpasswd
        - name: Add database extensions
          run: |
            psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "hstore";'
            psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "uuid-ossp";'
            psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "pg_trgm";'
            psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "unaccent";'
          env:
            PGPASSWORD: geonatpasswd
        - name: Install GDAL
          run: |
            sudo apt update
            sudo apt install -y libgdal-dev
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            python -m pip install \
              -e ..[tests] \
              -r requirements-dev.txt
          working-directory: ./dependencies/GeoNature/backend
        - name: Show database branches and dependencies
          run: |
            geonature db status --dependencies
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml
        - name: Install database
          run: |
            geonature db upgrade geonature@head -x local-srid=2154
            geonature db autoupgrade -x local-srid=2154
            geonature taxref import-v15 --skip-bdc-statuts
            geonature db upgrade geonature-samples@head
            geonature db upgrade nomenclatures_taxonomie_data@head
            geonature db upgrade ref_geo_fr_departments@head
            geonature db upgrade ref_geo_fr_municipalities@head
            geonature db upgrade ref_geo_inpn_grids_5@head
            geonature db upgrade ref_sensitivity_inpn@head
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml
        - name: Show database status
          run: |
            geonature db status
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml
        - name: Install core modules
          run: |
            geonature install_packaged_gn_module ./dependencies/GeoNature/contrib/occtax OCCTAX
            geonature install_packaged_gn_module ./dependencies/GeoNature/contrib/gn_module_occhab OCCHAB
            geonature install_packaged_gn_module ./dependencies/GeoNature/contrib/gn_module_validation VALIDATION
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml

        # FRONTEND
        - name: Cache node modules
          uses: actions/cache@v1
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
              ${{ runner.os }}-node-
        - name: Node ${{ matrix.node-version }}
          uses: actions/setup-node@v1
          with:
            node-version: ${{ matrix.node-version }}
        - name: install frontend
          run: |
            cp ./config/settings.ini.sample ./config/settings.ini
            geonature generate_frontend_config
            geonature generate_frontend_tsconfig
            geonature generate_frontend_tsconfig_app
            geonature generate_frontend_modules_route
            ./install/05_install_frontend.sh --ci
          working-directory: ./dependencies/GeoNature
          env:
            GEONATURE_CONFIG_FILE: config/test_config.toml

        # GN_MODULES
        - name: Install gn_modules
          run: geonature install_packaged_gn_module . MODULES --skip-frontend
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml
        - name: test
          run: echo ok

        # Test GN_MODULES
        - name: Pytest gn_modules
          run: pytest ./backend/gn_modules/tests/*
          env:
            GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml
