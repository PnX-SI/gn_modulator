name: pytest

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  GEONATURE_CONFIG_FILE: ./dependencies/GeoNature/config/test_config.toml

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Debian 10"
            python-version: "3.7"
            postgres-version: 11
            postgis-version: 2.5
          - name: "Debian 11"
            python-version: "3.9"
            postgres-version: 13
            postgis-version: 3.2

    name: ${{ matrix.name }}

    services:
      postgres:
        image: postgis/postgis:${{ matrix.postgres-version }}-${{ matrix.postgis-version }}
        env:
          POSTGRES_DB: geonature2db
          POSTGRES_PASSWORD: geonatpasswd
          POSTGRES_USER: geonatadmin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Add postgis_raster database extension
        if: ${{ matrix.postgis-version >= 3 }}
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "postgis_raster";'
        env:
          PGPASSWORD: geonatpasswd
      - name: Add database extensions
        run: |
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "hstore";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "uuid-ossp";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "pg_trgm";'
          psql -h localhost -U geonatadmin -d geonature2db -tc 'CREATE EXTENSION "unaccent";'
        env:
          PGPASSWORD: geonatpasswd
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install GDAL
        run: |
          sudo apt update
          sudo apt install -y libgdal-dev
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install \
            -e ..[tests] \
            -r requirements-dev.txt \
        working-directory: ./dependencies/GeoNature/backend
      - name: Show database branches and dependencies
        run: |
          geonature db status --dependencies

      - name: Install database
        run: |
          ./dependencies/GeoNature/install/03b_populate_db.sh
        env:
          srid_local: 2154
          install_bdc_statuts: true
          add_sample_data: true
          install_sig_layers: true
          install_grid_layer_5: true
          install_ref_sensitivity: true

      - name: Show database status
        run: |
          geonature db status

      - name: Install core modules
        run: |
          pip install -e ./dependencies/GeoNature/contrib/occtax
          pip install -e ./dependencies/GeoNature/contrib/gn_module_occhab
          pip install -e ./dependencies/GeoNature/contrib/gn_module_validation

      - name: Install GN Modulator
        run: |
          pip install -e .

      - name: Install modules db
        run: |
          geonature upgrade-modules-db

      - name: check gn_modulator
        run: geonature modulator check

      - name: list modules
        run: geonature modulator install

      # - name: install m_monitoring
      #   run: geonature modulator install -p ./contrib/m_monitoring

      # - name: install m_monitoring test 1
      #   run: geonature modulator install m_monitoring_test_1

      # - name: install m_monitoring test 2
      #   run: geonature modulator install m_monitoring_test_2

      - name: install m_sipaf
        run: geonature modulator install -p ./contrib/m_sipaf

      - name: Pytest gn_modulator
        run: pytest -v --cov --cov-report xml

      - name: Upload coverage to Codecov
        if: ${{ matrix.name == 'Debian 11' }}
        uses: codecov/codecov-action@v2
        with:
          flags: pytest
